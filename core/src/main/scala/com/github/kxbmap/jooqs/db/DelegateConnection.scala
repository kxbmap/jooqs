package com.github.kxbmap.jooqs.db

import java.sql.{Array => SqlArray, _}
import java.util.Properties
import java.util.concurrent.Executor

class DelegateConnection(val underlying: Connection) extends Connection {

  def setAutoCommit(autoCommit: Boolean): Unit = underlying.setAutoCommit(autoCommit)

  def setHoldability(holdability: Int): Unit = underlying.setHoldability(holdability)

  def clearWarnings(): Unit = underlying.clearWarnings()

  def getNetworkTimeout: Int = underlying.getNetworkTimeout

  def createBlob(): Blob = underlying.createBlob()

  def createSQLXML(): SQLXML = underlying.createSQLXML()

  def setSavepoint(): Savepoint = underlying.setSavepoint()

  def setSavepoint(name: String): Savepoint = underlying.setSavepoint(name)

  def createNClob(): NClob = underlying.createNClob()

  def getTransactionIsolation: Int = underlying.getTransactionIsolation

  def getClientInfo(name: String): String = underlying.getClientInfo(name)

  def getClientInfo: Properties = underlying.getClientInfo

  def getSchema: String = underlying.getSchema

  def setNetworkTimeout(executor: Executor, milliseconds: Int): Unit = underlying.setNetworkTimeout(executor, milliseconds)

  def getMetaData: DatabaseMetaData = underlying.getMetaData

  def getTypeMap: java.util.Map[String, Class[_]] = underlying.getTypeMap

  def rollback(): Unit = underlying.rollback()

  def rollback(savepoint: Savepoint): Unit = underlying.rollback(savepoint)

  def createStatement(): Statement = underlying.createStatement()

  def createStatement(resultSetType: Int, resultSetConcurrency: Int): Statement = underlying.createStatement(resultSetType, resultSetConcurrency)

  def createStatement(resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int): Statement = underlying.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability)

  def getHoldability: Int = underlying.getHoldability

  def setReadOnly(readOnly: Boolean): Unit = underlying.setReadOnly(readOnly)

  def setClientInfo(name: String, value: String): Unit = underlying.setClientInfo(name, value)

  def setClientInfo(properties: Properties): Unit = underlying.setClientInfo(properties)

  def isReadOnly: Boolean = underlying.isReadOnly

  def setTypeMap(map: java.util.Map[String, Class[_]]): Unit = underlying.setTypeMap(map)

  def getCatalog: String = underlying.getCatalog

  def createClob(): Clob = underlying.createClob()

  def setTransactionIsolation(level: Int): Unit = underlying.setTransactionIsolation(level)

  def nativeSQL(sql: String): String = underlying.nativeSQL(sql)

  def prepareCall(sql: String): CallableStatement = underlying.prepareCall(sql)

  def prepareCall(sql: String, resultSetType: Int, resultSetConcurrency: Int): CallableStatement = underlying.prepareCall(sql, resultSetType, resultSetConcurrency)

  def prepareCall(sql: String, resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int): CallableStatement = underlying.prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability)

  def createArrayOf(typeName: String, elements: Array[AnyRef]): SqlArray = underlying.createArrayOf(typeName, elements)

  def setCatalog(catalog: String): Unit = underlying.setCatalog(catalog)

  def close(): Unit = underlying.close()

  def getAutoCommit: Boolean = underlying.getAutoCommit

  def abort(executor: Executor): Unit = underlying.abort(executor)

  def isValid(timeout: Int): Boolean = underlying.isValid(timeout)

  def prepareStatement(sql: String): PreparedStatement = underlying.prepareStatement(sql)

  def prepareStatement(sql: String, resultSetType: Int, resultSetConcurrency: Int): PreparedStatement = underlying.prepareStatement(sql, resultSetType, resultSetConcurrency)

  def prepareStatement(sql: String, resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int): PreparedStatement = underlying.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability)

  def prepareStatement(sql: String, autoGeneratedKeys: Int): PreparedStatement = underlying.prepareStatement(sql, autoGeneratedKeys)

  def prepareStatement(sql: String, columnIndexes: Array[Int]): PreparedStatement = underlying.prepareStatement(sql, columnIndexes)

  def prepareStatement(sql: String, columnNames: Array[String]): PreparedStatement = underlying.prepareStatement(sql, columnNames)

  def releaseSavepoint(savepoint: Savepoint): Unit = underlying.releaseSavepoint(savepoint)

  def isClosed: Boolean = underlying.isClosed

  def createStruct(typeName: String, attributes: Array[AnyRef]): Struct = underlying.createStruct(typeName, attributes)

  def getWarnings: SQLWarning = underlying.getWarnings

  def setSchema(schema: String): Unit = underlying.setSchema(schema)

  def commit(): Unit = underlying.commit()

  def unwrap[T](iface: Class[T]): T = underlying.unwrap(iface)

  def isWrapperFor(iface: Class[_]): Boolean = underlying.isWrapperFor(iface)
}
